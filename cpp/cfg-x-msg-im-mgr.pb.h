// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-mgr.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dim_2dmgr_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dim_2dmgr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUseImpl();
void InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse();
void InitDefaultsXmsgImMgrCfgPbImpl();
void InitDefaultsXmsgImMgrCfgPb();
void InitDefaultsXmsgImMgrCfgMongodbImpl();
void InitDefaultsXmsgImMgrCfgMongodb();
void InitDefaultsXmsgImMgrCfgMysqlImpl();
void InitDefaultsXmsgImMgrCfgMysql();
void InitDefaultsXmsgImMgrCfgLogImpl();
void InitDefaultsXmsgImMgrCfgLog();
void InitDefaultsXmsgImMgrCfgXscTcpServerImpl();
void InitDefaultsXmsgImMgrCfgXscTcpServer();
void InitDefaultsXmsgImMgrCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgImMgrCfgXmsgNeH2nAddr();
void InitDefaultsXmsgImMgrCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgImMgrCfgXmsgNeN2hAddr();
void InitDefaultsXmsgImMgrCfgInfluxDbImpl();
void InitDefaultsXmsgImMgrCfgInfluxDb();
void InitDefaultsXmsgImMgrCfgMiscImpl();
void InitDefaultsXmsgImMgrCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse();
  InitDefaultsXmsgImMgrCfgPb();
  InitDefaultsXmsgImMgrCfgMongodb();
  InitDefaultsXmsgImMgrCfgMysql();
  InitDefaultsXmsgImMgrCfgLog();
  InitDefaultsXmsgImMgrCfgXscTcpServer();
  InitDefaultsXmsgImMgrCfgXmsgNeH2nAddr();
  InitDefaultsXmsgImMgrCfgXmsgNeN2hAddr();
  InitDefaultsXmsgImMgrCfgInfluxDb();
  InitDefaultsXmsgImMgrCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto
class XmsgImMgrCfgInfluxDb;
class XmsgImMgrCfgInfluxDbDefaultTypeInternal;
extern XmsgImMgrCfgInfluxDbDefaultTypeInternal _XmsgImMgrCfgInfluxDb_default_instance_;
class XmsgImMgrCfgLog;
class XmsgImMgrCfgLogDefaultTypeInternal;
extern XmsgImMgrCfgLogDefaultTypeInternal _XmsgImMgrCfgLog_default_instance_;
class XmsgImMgrCfgMisc;
class XmsgImMgrCfgMiscDefaultTypeInternal;
extern XmsgImMgrCfgMiscDefaultTypeInternal _XmsgImMgrCfgMisc_default_instance_;
class XmsgImMgrCfgMongodb;
class XmsgImMgrCfgMongodbDefaultTypeInternal;
extern XmsgImMgrCfgMongodbDefaultTypeInternal _XmsgImMgrCfgMongodb_default_instance_;
class XmsgImMgrCfgMysql;
class XmsgImMgrCfgMysqlDefaultTypeInternal;
extern XmsgImMgrCfgMysqlDefaultTypeInternal _XmsgImMgrCfgMysql_default_instance_;
class XmsgImMgrCfgPb;
class XmsgImMgrCfgPbDefaultTypeInternal;
extern XmsgImMgrCfgPbDefaultTypeInternal _XmsgImMgrCfgPb_default_instance_;
class XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse;
class XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUseDefaultTypeInternal;
extern XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUseDefaultTypeInternal _XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse_default_instance_;
class XmsgImMgrCfgXmsgNeH2nAddr;
class XmsgImMgrCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgImMgrCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgImMgrCfgXmsgNeH2nAddr_default_instance_;
class XmsgImMgrCfgXmsgNeN2hAddr;
class XmsgImMgrCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgImMgrCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgImMgrCfgXmsgNeN2hAddr_default_instance_;
class XmsgImMgrCfgXscTcpServer;
class XmsgImMgrCfgXscTcpServerDefaultTypeInternal;
extern XmsgImMgrCfgXscTcpServerDefaultTypeInternal _XmsgImMgrCfgXscTcpServer_default_instance_;

// ===================================================================

class XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse();
  XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse& other);
  static const XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse*>(&_XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImMgrCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgPb) */ {
 public:
  XmsgImMgrCfgPb();
  virtual ~XmsgImMgrCfgPb();

  XmsgImMgrCfgPb(const XmsgImMgrCfgPb& from);

  inline XmsgImMgrCfgPb& operator=(const XmsgImMgrCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgPb(XmsgImMgrCfgPb&& from) noexcept
    : XmsgImMgrCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgPb& operator=(XmsgImMgrCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgPb*>(
               &_XmsgImMgrCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgImMgrCfgPb* other);
  friend void swap(XmsgImMgrCfgPb& a, XmsgImMgrCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgPb& from);
  void MergeFrom(const XmsgImMgrCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .XmsgImMgrCfgXmsgNeH2nAddr h2n = 7;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 7;
  const ::XmsgImMgrCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgImMgrCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgImMgrCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgImMgrCfgXmsgNeN2hAddr n2h = 8;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 8;
  const ::XmsgImMgrCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgImMgrCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgImMgrCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeN2hAddr >&
      n2h() const;

  // map<string, string> neMsgPrefix = 15;
  int nemsgprefix_size() const;
  void clear_nemsgprefix();
  static const int kNeMsgPrefixFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      nemsgprefix() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_nemsgprefix();

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // .XmsgImMgrCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgImMgrCfgLog& log() const;
  ::XmsgImMgrCfgLog* release_log();
  ::XmsgImMgrCfgLog* mutable_log();
  void set_allocated_log(::XmsgImMgrCfgLog* log);

  // .XmsgImMgrCfgXscTcpServer xscTcpCfg = 6;
  bool has_xsctcpcfg() const;
  void clear_xsctcpcfg();
  static const int kXscTcpCfgFieldNumber = 6;
  const ::XmsgImMgrCfgXscTcpServer& xsctcpcfg() const;
  ::XmsgImMgrCfgXscTcpServer* release_xsctcpcfg();
  ::XmsgImMgrCfgXscTcpServer* mutable_xsctcpcfg();
  void set_allocated_xsctcpcfg(::XmsgImMgrCfgXscTcpServer* xsctcpcfg);

  // .XmsgImMgrCfgMisc misc = 9;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 9;
  const ::XmsgImMgrCfgMisc& misc() const;
  ::XmsgImMgrCfgMisc* release_misc();
  ::XmsgImMgrCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgImMgrCfgMisc* misc);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::MapField<
      XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > nemsgprefix_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::XmsgImMgrCfgLog* log_;
  ::XmsgImMgrCfgXscTcpServer* xsctcpcfg_;
  ::XmsgImMgrCfgMisc* misc_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgMongodb) */ {
 public:
  XmsgImMgrCfgMongodb();
  virtual ~XmsgImMgrCfgMongodb();

  XmsgImMgrCfgMongodb(const XmsgImMgrCfgMongodb& from);

  inline XmsgImMgrCfgMongodb& operator=(const XmsgImMgrCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgMongodb(XmsgImMgrCfgMongodb&& from) noexcept
    : XmsgImMgrCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgMongodb& operator=(XmsgImMgrCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgMongodb*>(
               &_XmsgImMgrCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgImMgrCfgMongodb* other);
  friend void swap(XmsgImMgrCfgMongodb& a, XmsgImMgrCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgMongodb& from);
  void MergeFrom(const XmsgImMgrCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgMysql) */ {
 public:
  XmsgImMgrCfgMysql();
  virtual ~XmsgImMgrCfgMysql();

  XmsgImMgrCfgMysql(const XmsgImMgrCfgMysql& from);

  inline XmsgImMgrCfgMysql& operator=(const XmsgImMgrCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgMysql(XmsgImMgrCfgMysql&& from) noexcept
    : XmsgImMgrCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgMysql& operator=(XmsgImMgrCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgMysql*>(
               &_XmsgImMgrCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImMgrCfgMysql* other);
  friend void swap(XmsgImMgrCfgMysql& a, XmsgImMgrCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgMysql& from);
  void MergeFrom(const XmsgImMgrCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // uint32 poolSize = 1;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 1;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgLog) */ {
 public:
  XmsgImMgrCfgLog();
  virtual ~XmsgImMgrCfgLog();

  XmsgImMgrCfgLog(const XmsgImMgrCfgLog& from);

  inline XmsgImMgrCfgLog& operator=(const XmsgImMgrCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgLog(XmsgImMgrCfgLog&& from) noexcept
    : XmsgImMgrCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgLog& operator=(XmsgImMgrCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgLog*>(
               &_XmsgImMgrCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgImMgrCfgLog* other);
  friend void swap(XmsgImMgrCfgLog& a, XmsgImMgrCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgLog& from);
  void MergeFrom(const XmsgImMgrCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgXscTcpServer) */ {
 public:
  XmsgImMgrCfgXscTcpServer();
  virtual ~XmsgImMgrCfgXscTcpServer();

  XmsgImMgrCfgXscTcpServer(const XmsgImMgrCfgXscTcpServer& from);

  inline XmsgImMgrCfgXscTcpServer& operator=(const XmsgImMgrCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgXscTcpServer(XmsgImMgrCfgXscTcpServer&& from) noexcept
    : XmsgImMgrCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgXscTcpServer& operator=(XmsgImMgrCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgXscTcpServer*>(
               &_XmsgImMgrCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImMgrCfgXscTcpServer* other);
  friend void swap(XmsgImMgrCfgXscTcpServer& a, XmsgImMgrCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgXscTcpServer& from);
  void MergeFrom(const XmsgImMgrCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgXmsgNeH2nAddr) */ {
 public:
  XmsgImMgrCfgXmsgNeH2nAddr();
  virtual ~XmsgImMgrCfgXmsgNeH2nAddr();

  XmsgImMgrCfgXmsgNeH2nAddr(const XmsgImMgrCfgXmsgNeH2nAddr& from);

  inline XmsgImMgrCfgXmsgNeH2nAddr& operator=(const XmsgImMgrCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgXmsgNeH2nAddr(XmsgImMgrCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgImMgrCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgXmsgNeH2nAddr& operator=(XmsgImMgrCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgXmsgNeH2nAddr*>(
               &_XmsgImMgrCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgImMgrCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgImMgrCfgXmsgNeH2nAddr& a, XmsgImMgrCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgImMgrCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // string cgt = 6;
  void clear_cgt();
  static const int kCgtFieldNumber = 6;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // uint32 redundant = 5;
  void clear_redundant();
  static const int kRedundantFieldNumber = 5;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgXmsgNeN2hAddr) */ {
 public:
  XmsgImMgrCfgXmsgNeN2hAddr();
  virtual ~XmsgImMgrCfgXmsgNeN2hAddr();

  XmsgImMgrCfgXmsgNeN2hAddr(const XmsgImMgrCfgXmsgNeN2hAddr& from);

  inline XmsgImMgrCfgXmsgNeN2hAddr& operator=(const XmsgImMgrCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgXmsgNeN2hAddr(XmsgImMgrCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgImMgrCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgXmsgNeN2hAddr& operator=(XmsgImMgrCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgXmsgNeN2hAddr*>(
               &_XmsgImMgrCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImMgrCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgImMgrCfgXmsgNeN2hAddr& a, XmsgImMgrCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgImMgrCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgInfluxDb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgInfluxDb) */ {
 public:
  XmsgImMgrCfgInfluxDb();
  virtual ~XmsgImMgrCfgInfluxDb();

  XmsgImMgrCfgInfluxDb(const XmsgImMgrCfgInfluxDb& from);

  inline XmsgImMgrCfgInfluxDb& operator=(const XmsgImMgrCfgInfluxDb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgInfluxDb(XmsgImMgrCfgInfluxDb&& from) noexcept
    : XmsgImMgrCfgInfluxDb() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgInfluxDb& operator=(XmsgImMgrCfgInfluxDb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgInfluxDb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgInfluxDb* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgInfluxDb*>(
               &_XmsgImMgrCfgInfluxDb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(XmsgImMgrCfgInfluxDb* other);
  friend void swap(XmsgImMgrCfgInfluxDb& a, XmsgImMgrCfgInfluxDb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgInfluxDb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgInfluxDb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgInfluxDb& from);
  void MergeFrom(const XmsgImMgrCfgInfluxDb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgInfluxDb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string usr = 2;
  void clear_usr();
  static const int kUsrFieldNumber = 2;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string db = 4;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgInfluxDb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgInfluxDbImpl();
};
// -------------------------------------------------------------------

class XmsgImMgrCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImMgrCfgMisc) */ {
 public:
  XmsgImMgrCfgMisc();
  virtual ~XmsgImMgrCfgMisc();

  XmsgImMgrCfgMisc(const XmsgImMgrCfgMisc& from);

  inline XmsgImMgrCfgMisc& operator=(const XmsgImMgrCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImMgrCfgMisc(XmsgImMgrCfgMisc&& from) noexcept
    : XmsgImMgrCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgImMgrCfgMisc& operator=(XmsgImMgrCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImMgrCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImMgrCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgImMgrCfgMisc*>(
               &_XmsgImMgrCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(XmsgImMgrCfgMisc* other);
  friend void swap(XmsgImMgrCfgMisc& a, XmsgImMgrCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImMgrCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImMgrCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImMgrCfgMisc& from);
  void MergeFrom(const XmsgImMgrCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImMgrCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string adminCgt = 2;
  void clear_admincgt();
  static const int kAdminCgtFieldNumber = 2;
  const ::std::string& admincgt() const;
  void set_admincgt(const ::std::string& value);
  #if LANG_CXX11
  void set_admincgt(::std::string&& value);
  #endif
  void set_admincgt(const char* value);
  void set_admincgt(const char* value, size_t size);
  ::std::string* mutable_admincgt();
  ::std::string* release_admincgt();
  void set_allocated_admincgt(::std::string* admincgt);

  // @@protoc_insertion_point(class_scope:XmsgImMgrCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr admincgt_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// XmsgImMgrCfgPb

// string cgt = 1;
inline void XmsgImMgrCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImMgrCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgImMgrCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgPb.cgt)
}
#endif
inline void XmsgImMgrCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgPb.cgt)
}
inline void XmsgImMgrCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgPb.cgt)
}
inline ::std::string* XmsgImMgrCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgPb.cgt)
}

// .XmsgImMgrCfgLog log = 5;
inline bool XmsgImMgrCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgImMgrCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgImMgrCfgLog& XmsgImMgrCfgPb::log() const {
  const ::XmsgImMgrCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImMgrCfgLog*>(
      &::_XmsgImMgrCfgLog_default_instance_);
}
inline ::XmsgImMgrCfgLog* XmsgImMgrCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgPb.log)
  
  ::XmsgImMgrCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgImMgrCfgLog* XmsgImMgrCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgImMgrCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgPb.log)
  return log_;
}
inline void XmsgImMgrCfgPb::set_allocated_log(::XmsgImMgrCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgPb.log)
}

// .XmsgImMgrCfgXscTcpServer xscTcpCfg = 6;
inline bool XmsgImMgrCfgPb::has_xsctcpcfg() const {
  return this != internal_default_instance() && xsctcpcfg_ != NULL;
}
inline void XmsgImMgrCfgPb::clear_xsctcpcfg() {
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
}
inline const ::XmsgImMgrCfgXscTcpServer& XmsgImMgrCfgPb::xsctcpcfg() const {
  const ::XmsgImMgrCfgXscTcpServer* p = xsctcpcfg_;
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgPb.xscTcpCfg)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImMgrCfgXscTcpServer*>(
      &::_XmsgImMgrCfgXscTcpServer_default_instance_);
}
inline ::XmsgImMgrCfgXscTcpServer* XmsgImMgrCfgPb::release_xsctcpcfg() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgPb.xscTcpCfg)
  
  ::XmsgImMgrCfgXscTcpServer* temp = xsctcpcfg_;
  xsctcpcfg_ = NULL;
  return temp;
}
inline ::XmsgImMgrCfgXscTcpServer* XmsgImMgrCfgPb::mutable_xsctcpcfg() {
  
  if (xsctcpcfg_ == NULL) {
    xsctcpcfg_ = new ::XmsgImMgrCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgPb.xscTcpCfg)
  return xsctcpcfg_;
}
inline void XmsgImMgrCfgPb::set_allocated_xsctcpcfg(::XmsgImMgrCfgXscTcpServer* xsctcpcfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xsctcpcfg_;
  }
  if (xsctcpcfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xsctcpcfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xsctcpcfg, submessage_arena);
    }
    
  } else {
    
  }
  xsctcpcfg_ = xsctcpcfg;
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgPb.xscTcpCfg)
}

// repeated .XmsgImMgrCfgXmsgNeH2nAddr h2n = 7;
inline int XmsgImMgrCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgImMgrCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgImMgrCfgXmsgNeH2nAddr& XmsgImMgrCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgImMgrCfgXmsgNeH2nAddr* XmsgImMgrCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgImMgrCfgXmsgNeH2nAddr* XmsgImMgrCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgImMgrCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeH2nAddr >*
XmsgImMgrCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImMgrCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeH2nAddr >&
XmsgImMgrCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgImMgrCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgImMgrCfgXmsgNeN2hAddr n2h = 8;
inline int XmsgImMgrCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgImMgrCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgImMgrCfgXmsgNeN2hAddr& XmsgImMgrCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgImMgrCfgXmsgNeN2hAddr* XmsgImMgrCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgImMgrCfgXmsgNeN2hAddr* XmsgImMgrCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgImMgrCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeN2hAddr >*
XmsgImMgrCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImMgrCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImMgrCfgXmsgNeN2hAddr >&
XmsgImMgrCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgImMgrCfgPb.n2h)
  return n2h_;
}

// map<string, string> neMsgPrefix = 15;
inline int XmsgImMgrCfgPb::nemsgprefix_size() const {
  return nemsgprefix_.size();
}
inline void XmsgImMgrCfgPb::clear_nemsgprefix() {
  nemsgprefix_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImMgrCfgPb::nemsgprefix() const {
  // @@protoc_insertion_point(field_map:XmsgImMgrCfgPb.neMsgPrefix)
  return nemsgprefix_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImMgrCfgPb::mutable_nemsgprefix() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImMgrCfgPb.neMsgPrefix)
  return nemsgprefix_.MutableMap();
}

// .XmsgImMgrCfgMisc misc = 9;
inline bool XmsgImMgrCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgImMgrCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgImMgrCfgMisc& XmsgImMgrCfgPb::misc() const {
  const ::XmsgImMgrCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImMgrCfgMisc*>(
      &::_XmsgImMgrCfgMisc_default_instance_);
}
inline ::XmsgImMgrCfgMisc* XmsgImMgrCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgPb.misc)
  
  ::XmsgImMgrCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgImMgrCfgMisc* XmsgImMgrCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgImMgrCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgPb.misc)
  return misc_;
}
inline void XmsgImMgrCfgPb::set_allocated_misc(::XmsgImMgrCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgPb.misc)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgMongodb

// string uri = 1;
inline void XmsgImMgrCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgImMgrCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgImMgrCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgMongodb.uri)
}
#endif
inline void XmsgImMgrCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgMongodb.uri)
}
inline void XmsgImMgrCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgMongodb.uri)
}
inline ::std::string* XmsgImMgrCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgMysql

// uint32 poolSize = 1;
inline void XmsgImMgrCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgImMgrCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgMysql.poolSize)
}

// string uri = 2;
inline void XmsgImMgrCfgMysql::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgMysql::uri() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgMysql.uri)
  return uri_.GetNoArena();
}
inline void XmsgImMgrCfgMysql::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgMysql.uri)
}
#if LANG_CXX11
inline void XmsgImMgrCfgMysql::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgMysql.uri)
}
#endif
inline void XmsgImMgrCfgMysql::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgMysql.uri)
}
inline void XmsgImMgrCfgMysql::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgMysql.uri)
}
inline ::std::string* XmsgImMgrCfgMysql::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgMysql.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgMysql::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgMysql.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgMysql::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgMysql.uri)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgLog

// string level = 1;
inline void XmsgImMgrCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgImMgrCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgLog.level)
}
#if LANG_CXX11
inline void XmsgImMgrCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgLog.level)
}
#endif
inline void XmsgImMgrCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgLog.level)
}
inline void XmsgImMgrCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgLog.level)
}
inline ::std::string* XmsgImMgrCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgLog.level)
}

// string output = 2;
inline void XmsgImMgrCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgImMgrCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgLog.output)
}
#if LANG_CXX11
inline void XmsgImMgrCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgLog.output)
}
#endif
inline void XmsgImMgrCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgLog.output)
}
inline void XmsgImMgrCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgLog.output)
}
inline ::std::string* XmsgImMgrCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgXscTcpServer

// string addr = 1;
inline void XmsgImMgrCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImMgrCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXscTcpServer.addr)
}
#endif
inline void XmsgImMgrCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXscTcpServer.addr)
}
inline void XmsgImMgrCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXscTcpServer.addr)
}
inline ::std::string* XmsgImMgrCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgImMgrCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgImMgrCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgImMgrCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgImMgrCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgImMgrCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgImMgrCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgImMgrCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgImMgrCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgImMgrCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgImMgrCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgImMgrCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgImMgrCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgImMgrCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgImMgrCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgImMgrCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgImMgrCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgImMgrCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgImMgrCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgImMgrCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgImMgrCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgImMgrCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgImMgrCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgImMgrCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgImMgrCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgImMgrCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgImMgrCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgImMgrCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgImMgrCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgImMgrCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeH2nAddr.neg)
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeH2nAddr.neg)
}

// string addr = 2;
inline void XmsgImMgrCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeH2nAddr.addr)
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeH2nAddr.addr)
}

// string pwd = 3;
inline void XmsgImMgrCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeH2nAddr.pwd)
}

// string alg = 4;
inline void XmsgImMgrCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeH2nAddr.alg)
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 5;
inline void XmsgImMgrCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImMgrCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeH2nAddr.redundant)
}

// string cgt = 6;
inline void XmsgImMgrCfgXmsgNeH2nAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeH2nAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
}
#endif
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeH2nAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeH2nAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeH2nAddr.cgt)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgImMgrCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeN2hAddr.neg)
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgImMgrCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgImMgrCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgImMgrCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgXmsgNeN2hAddr.addr)
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgInfluxDb

// string host = 1;
inline void XmsgImMgrCfgInfluxDb::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgInfluxDb::host() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgInfluxDb.host)
  return host_.GetNoArena();
}
inline void XmsgImMgrCfgInfluxDb::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgInfluxDb.host)
}
#if LANG_CXX11
inline void XmsgImMgrCfgInfluxDb::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgInfluxDb.host)
}
#endif
inline void XmsgImMgrCfgInfluxDb::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgInfluxDb.host)
}
inline void XmsgImMgrCfgInfluxDb::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgInfluxDb.host)
}
inline ::std::string* XmsgImMgrCfgInfluxDb::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgInfluxDb.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgInfluxDb::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgInfluxDb.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgInfluxDb::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgInfluxDb.host)
}

// string usr = 2;
inline void XmsgImMgrCfgInfluxDb::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgInfluxDb::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgInfluxDb.usr)
  return usr_.GetNoArena();
}
inline void XmsgImMgrCfgInfluxDb::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgInfluxDb.usr)
}
#if LANG_CXX11
inline void XmsgImMgrCfgInfluxDb::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgInfluxDb.usr)
}
#endif
inline void XmsgImMgrCfgInfluxDb::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgInfluxDb.usr)
}
inline void XmsgImMgrCfgInfluxDb::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgInfluxDb.usr)
}
inline ::std::string* XmsgImMgrCfgInfluxDb::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgInfluxDb.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgInfluxDb::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgInfluxDb.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgInfluxDb::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgInfluxDb.usr)
}

// string pwd = 3;
inline void XmsgImMgrCfgInfluxDb::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgInfluxDb::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgInfluxDb.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImMgrCfgInfluxDb::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgInfluxDb.pwd)
}
#if LANG_CXX11
inline void XmsgImMgrCfgInfluxDb::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgInfluxDb.pwd)
}
#endif
inline void XmsgImMgrCfgInfluxDb::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgInfluxDb.pwd)
}
inline void XmsgImMgrCfgInfluxDb::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgInfluxDb.pwd)
}
inline ::std::string* XmsgImMgrCfgInfluxDb::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgInfluxDb.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgInfluxDb::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgInfluxDb.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgInfluxDb::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgInfluxDb.pwd)
}

// string db = 4;
inline void XmsgImMgrCfgInfluxDb::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgInfluxDb::db() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgInfluxDb.db)
  return db_.GetNoArena();
}
inline void XmsgImMgrCfgInfluxDb::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgInfluxDb.db)
}
#if LANG_CXX11
inline void XmsgImMgrCfgInfluxDb::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgInfluxDb.db)
}
#endif
inline void XmsgImMgrCfgInfluxDb::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgInfluxDb.db)
}
inline void XmsgImMgrCfgInfluxDb::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgInfluxDb.db)
}
inline ::std::string* XmsgImMgrCfgInfluxDb::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgInfluxDb.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgInfluxDb::release_db() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgInfluxDb.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgInfluxDb::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgInfluxDb.db)
}

// -------------------------------------------------------------------

// XmsgImMgrCfgMisc

// string adminCgt = 2;
inline void XmsgImMgrCfgMisc::clear_admincgt() {
  admincgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImMgrCfgMisc::admincgt() const {
  // @@protoc_insertion_point(field_get:XmsgImMgrCfgMisc.adminCgt)
  return admincgt_.GetNoArena();
}
inline void XmsgImMgrCfgMisc::set_admincgt(const ::std::string& value) {
  
  admincgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImMgrCfgMisc.adminCgt)
}
#if LANG_CXX11
inline void XmsgImMgrCfgMisc::set_admincgt(::std::string&& value) {
  
  admincgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImMgrCfgMisc.adminCgt)
}
#endif
inline void XmsgImMgrCfgMisc::set_admincgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  admincgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImMgrCfgMisc.adminCgt)
}
inline void XmsgImMgrCfgMisc::set_admincgt(const char* value, size_t size) {
  
  admincgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImMgrCfgMisc.adminCgt)
}
inline ::std::string* XmsgImMgrCfgMisc::mutable_admincgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImMgrCfgMisc.adminCgt)
  return admincgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImMgrCfgMisc::release_admincgt() {
  // @@protoc_insertion_point(field_release:XmsgImMgrCfgMisc.adminCgt)
  
  return admincgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImMgrCfgMisc::set_allocated_admincgt(::std::string* admincgt) {
  if (admincgt != NULL) {
    
  } else {
    
  }
  admincgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), admincgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImMgrCfgMisc.adminCgt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dim_2dmgr_2eproto__INCLUDED
