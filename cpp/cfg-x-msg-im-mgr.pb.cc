// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-mgr.proto

#include "cfg-x-msg-im-mgr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse>
      _instance;
} _XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse_default_instance_;
class XmsgImMgrCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgPb>
      _instance;
} _XmsgImMgrCfgPb_default_instance_;
class XmsgImMgrCfgMongodbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgMongodb>
      _instance;
} _XmsgImMgrCfgMongodb_default_instance_;
class XmsgImMgrCfgMysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgMysql>
      _instance;
} _XmsgImMgrCfgMysql_default_instance_;
class XmsgImMgrCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgLog>
      _instance;
} _XmsgImMgrCfgLog_default_instance_;
class XmsgImMgrCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgXscTcpServer>
      _instance;
} _XmsgImMgrCfgXscTcpServer_default_instance_;
class XmsgImMgrCfgXmsgNeH2nAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgXmsgNeH2nAddr>
      _instance;
} _XmsgImMgrCfgXmsgNeH2nAddr_default_instance_;
class XmsgImMgrCfgXmsgNeN2hAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgXmsgNeN2hAddr>
      _instance;
} _XmsgImMgrCfgXmsgNeN2hAddr_default_instance_;
class XmsgImMgrCfgInfluxDbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgInfluxDb>
      _instance;
} _XmsgImMgrCfgInfluxDb_default_instance_;
class XmsgImMgrCfgMiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImMgrCfgMisc>
      _instance;
} _XmsgImMgrCfgMisc_default_instance_;
namespace protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto {
void InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse();
  }
  ::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImMgrCfgPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgLog();
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXscTcpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeH2nAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeN2hAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse();
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMisc();
  {
    void* ptr = &::_XmsgImMgrCfgPb_default_instance_;
    new (ptr) ::XmsgImMgrCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgPb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgPbImpl);
}

void InitDefaultsXmsgImMgrCfgMongodbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgMongodb_default_instance_;
    new (ptr) ::XmsgImMgrCfgMongodb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgMongodb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgMongodb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgMongodbImpl);
}

void InitDefaultsXmsgImMgrCfgMysqlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgMysql_default_instance_;
    new (ptr) ::XmsgImMgrCfgMysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgMysql::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgMysql() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgMysqlImpl);
}

void InitDefaultsXmsgImMgrCfgLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgLog_default_instance_;
    new (ptr) ::XmsgImMgrCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgLog::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgLogImpl);
}

void InitDefaultsXmsgImMgrCfgXscTcpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgImMgrCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgXscTcpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgXscTcpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgXscTcpServerImpl);
}

void InitDefaultsXmsgImMgrCfgXmsgNeH2nAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgXmsgNeH2nAddr_default_instance_;
    new (ptr) ::XmsgImMgrCfgXmsgNeH2nAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgXmsgNeH2nAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgXmsgNeH2nAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgXmsgNeH2nAddrImpl);
}

void InitDefaultsXmsgImMgrCfgXmsgNeN2hAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgXmsgNeN2hAddr_default_instance_;
    new (ptr) ::XmsgImMgrCfgXmsgNeN2hAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgXmsgNeN2hAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgXmsgNeN2hAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgXmsgNeN2hAddrImpl);
}

void InitDefaultsXmsgImMgrCfgInfluxDbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgInfluxDb_default_instance_;
    new (ptr) ::XmsgImMgrCfgInfluxDb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgInfluxDb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgInfluxDb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgInfluxDbImpl);
}

void InitDefaultsXmsgImMgrCfgMiscImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImMgrCfgMisc_default_instance_;
    new (ptr) ::XmsgImMgrCfgMisc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImMgrCfgMisc::InitAsDefaultInstance();
}

void InitDefaultsXmsgImMgrCfgMisc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImMgrCfgMiscImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, xsctcpcfg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, h2n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, n2h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, nemsgprefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgPb, misc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMongodb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMongodb, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMysql, poolsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMysql, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgLog, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgLog, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, worker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, peerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, peermtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, peerrcvbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, peersndbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, lazyclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, n2hzombie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, n2htranstimeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, n2htracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, h2nreconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, redundant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeH2nAddr, cgt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeN2hAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeN2hAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeN2hAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeN2hAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgXmsgNeN2hAddr, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgInfluxDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgInfluxDb, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgInfluxDb, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgInfluxDb, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgInfluxDb, db_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImMgrCfgMisc, admincgt_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse)},
  { 9, -1, sizeof(::XmsgImMgrCfgPb)},
  { 21, -1, sizeof(::XmsgImMgrCfgMongodb)},
  { 27, -1, sizeof(::XmsgImMgrCfgMysql)},
  { 34, -1, sizeof(::XmsgImMgrCfgLog)},
  { 41, -1, sizeof(::XmsgImMgrCfgXscTcpServer)},
  { 60, -1, sizeof(::XmsgImMgrCfgXmsgNeH2nAddr)},
  { 71, -1, sizeof(::XmsgImMgrCfgXmsgNeN2hAddr)},
  { 80, -1, sizeof(::XmsgImMgrCfgInfluxDb)},
  { 89, -1, sizeof(::XmsgImMgrCfgMisc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgMongodb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgMysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgXmsgNeH2nAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgXmsgNeN2hAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgInfluxDb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImMgrCfgMisc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfg-x-msg-im-mgr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026cfg-x-msg-im-mgr.proto\"\310\002\n\016XmsgImMgrCf"
      "gPb\022\013\n\003cgt\030\001 \001(\t\022\035\n\003log\030\005 \001(\0132\020.XmsgImMg"
      "rCfgLog\022,\n\txscTcpCfg\030\006 \001(\0132\031.XmsgImMgrCf"
      "gXscTcpServer\022\'\n\003h2n\030\007 \003(\0132\032.XmsgImMgrCf"
      "gXmsgNeH2nAddr\022\'\n\003n2h\030\010 \003(\0132\032.XmsgImMgrC"
      "fgXmsgNeN2hAddr\0225\n\013neMsgPrefix\030\017 \003(\0132 .X"
      "msgImMgrCfgPb.NeMsgPrefixEntry\022\037\n\004misc\030\t"
      " \001(\0132\021.XmsgImMgrCfgMisc\0322\n\020NeMsgPrefixEn"
      "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\"\n\023X"
      "msgImMgrCfgMongodb\022\013\n\003uri\030\001 \001(\t\"2\n\021XmsgI"
      "mMgrCfgMysql\022\020\n\010poolSize\030\001 \001(\r\022\013\n\003uri\030\002 "
      "\001(\t\"0\n\017XmsgImMgrCfgLog\022\r\n\005level\030\001 \001(\t\022\016\n"
      "\006output\030\002 \001(\t\"\247\002\n\030XmsgImMgrCfgXscTcpServ"
      "er\022\014\n\004addr\030\001 \001(\t\022\016\n\006worker\030\002 \001(\r\022\021\n\tpeer"
      "Limit\030\003 \001(\r\022\017\n\007peerMtu\030\004 \001(\r\022\022\n\npeerRcvB"
      "uf\030\005 \001(\r\022\022\n\npeerSndBuf\030\006 \001(\r\022\021\n\tlazyClos"
      "e\030\007 \001(\r\022\017\n\007tracing\030\010 \001(\010\022\021\n\theartbeat\030\t "
      "\001(\r\022\021\n\tn2hZombie\030\n \001(\r\022\027\n\017n2hTransTimeou"
      "t\030\013 \001(\r\022\022\n\nn2hTracing\030\014 \001(\010\022\021\n\th2nReConn"
      "\030\r \001(\r\022\027\n\017h2nTransTimeout\030\016 \001(\r\"p\n\031XmsgI"
      "mMgrCfgXmsgNeH2nAddr\022\013\n\003neg\030\001 \001(\t\022\014\n\004add"
      "r\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\013\n\003alg\030\004 \001(\t\022\021\n\tred"
      "undant\030\005 \001(\r\022\013\n\003cgt\030\006 \001(\t\"P\n\031XmsgImMgrCf"
      "gXmsgNeN2hAddr\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t"
      "\022\013\n\003pwd\030\003 \001(\t\022\014\n\004addr\030\004 \001(\t\"J\n\024XmsgImMgr"
      "CfgInfluxDb\022\014\n\004host\030\001 \001(\t\022\013\n\003usr\030\002 \001(\t\022\013"
      "\n\003pwd\030\003 \001(\t\022\n\n\002db\030\004 \001(\t\"$\n\020XmsgImMgrCfgM"
      "isc\022\020\n\010adminCgt\030\002 \001(\tB\032\n\010x.msg.pbB\016XmsgI"
      "mMgrCfgPbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg-x-msg-im-mgr.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto

// ===================================================================

XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse() {}
XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::MergeFrom(const XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[0];
}
void XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImMgrCfgPb::InitAsDefaultInstance() {
  ::_XmsgImMgrCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgImMgrCfgLog*>(
      ::XmsgImMgrCfgLog::internal_default_instance());
  ::_XmsgImMgrCfgPb_default_instance_._instance.get_mutable()->xsctcpcfg_ = const_cast< ::XmsgImMgrCfgXscTcpServer*>(
      ::XmsgImMgrCfgXscTcpServer::internal_default_instance());
  ::_XmsgImMgrCfgPb_default_instance_._instance.get_mutable()->misc_ = const_cast< ::XmsgImMgrCfgMisc*>(
      ::XmsgImMgrCfgMisc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgPb::kCgtFieldNumber;
const int XmsgImMgrCfgPb::kLogFieldNumber;
const int XmsgImMgrCfgPb::kXscTcpCfgFieldNumber;
const int XmsgImMgrCfgPb::kH2NFieldNumber;
const int XmsgImMgrCfgPb::kN2HFieldNumber;
const int XmsgImMgrCfgPb::kNeMsgPrefixFieldNumber;
const int XmsgImMgrCfgPb::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgPb::XmsgImMgrCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgPb)
}
XmsgImMgrCfgPb::XmsgImMgrCfgPb(const XmsgImMgrCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      h2n_(from.h2n_),
      n2h_(from.n2h_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nemsgprefix_.MergeFrom(from.nemsgprefix_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.has_log()) {
    log_ = new ::XmsgImMgrCfgLog(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_xsctcpcfg()) {
    xsctcpcfg_ = new ::XmsgImMgrCfgXscTcpServer(*from.xsctcpcfg_);
  } else {
    xsctcpcfg_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::XmsgImMgrCfgMisc(*from.misc_);
  } else {
    misc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgPb)
}

void XmsgImMgrCfgPb::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&log_)) + sizeof(misc_));
  _cached_size_ = 0;
}

XmsgImMgrCfgPb::~XmsgImMgrCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgPb)
  SharedDtor();
}

void XmsgImMgrCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete xsctcpcfg_;
  if (this != internal_default_instance()) delete misc_;
}

void XmsgImMgrCfgPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgPb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgPb& XmsgImMgrCfgPb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgPb();
  return *internal_default_instance();
}

XmsgImMgrCfgPb* XmsgImMgrCfgPb::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgPb* n = new XmsgImMgrCfgPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  h2n_.Clear();
  n2h_.Clear();
  nemsgprefix_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImMgrCfgLog log = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImMgrCfgXscTcpServer xscTcpCfg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xsctcpcfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImMgrCfgXmsgNeH2nAddr h2n = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_h2n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImMgrCfgXmsgNeN2hAddr n2h = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImMgrCfgMisc misc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> neMsgPrefix = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&nemsgprefix_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgPb.NeMsgPrefixEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgPb.NeMsgPrefixEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgPb)
  return false;
#undef DO_
}

void XmsgImMgrCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // .XmsgImMgrCfgLog log = 5;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->log_, output);
  }

  // .XmsgImMgrCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->xsctcpcfg_, output);
  }

  // repeated .XmsgImMgrCfgXmsgNeH2nAddr h2n = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->h2n(static_cast<int>(i)), output);
  }

  // repeated .XmsgImMgrCfgXmsgNeN2hAddr n2h = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->n2h(static_cast<int>(i)), output);
  }

  // .XmsgImMgrCfgMisc misc = 9;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->misc_, output);
  }

  // map<string, string> neMsgPrefix = 15;
  if (!this->nemsgprefix().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImMgrCfgPb.NeMsgPrefixEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImMgrCfgPb.NeMsgPrefixEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->nemsgprefix().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nemsgprefix().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->nemsgprefix().begin();
          it != this->nemsgprefix().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nemsgprefix_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->nemsgprefix().begin();
          it != this->nemsgprefix().end(); ++it) {
        entry.reset(nemsgprefix_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgPb)
}

::google::protobuf::uint8* XmsgImMgrCfgPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // .XmsgImMgrCfgLog log = 5;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->log_, deterministic, target);
  }

  // .XmsgImMgrCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->xsctcpcfg_, deterministic, target);
  }

  // repeated .XmsgImMgrCfgXmsgNeH2nAddr h2n = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->h2n(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XmsgImMgrCfgXmsgNeN2hAddr n2h = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->n2h(static_cast<int>(i)), deterministic, target);
  }

  // .XmsgImMgrCfgMisc misc = 9;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->misc_, deterministic, target);
  }

  // map<string, string> neMsgPrefix = 15;
  if (!this->nemsgprefix().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImMgrCfgPb.NeMsgPrefixEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImMgrCfgPb.NeMsgPrefixEntry.value");
      }
    };

    if (deterministic &&
        this->nemsgprefix().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nemsgprefix().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->nemsgprefix().begin();
          it != this->nemsgprefix().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nemsgprefix_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->nemsgprefix().begin();
          it != this->nemsgprefix().end(); ++it) {
        entry.reset(nemsgprefix_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgPb)
  return target;
}

size_t XmsgImMgrCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImMgrCfgXmsgNeH2nAddr h2n = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->h2n_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->h2n(static_cast<int>(i)));
    }
  }

  // repeated .XmsgImMgrCfgXmsgNeN2hAddr n2h = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // map<string, string> neMsgPrefix = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nemsgprefix_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImMgrCfgPb_NeMsgPrefixEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->nemsgprefix().begin();
        it != this->nemsgprefix().end(); ++it) {
      entry.reset(nemsgprefix_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // .XmsgImMgrCfgLog log = 5;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->log_);
  }

  // .XmsgImMgrCfgXscTcpServer xscTcpCfg = 6;
  if (this->has_xsctcpcfg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->xsctcpcfg_);
  }

  // .XmsgImMgrCfgMisc misc = 9;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->misc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgPb)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgPb::MergeFrom(const XmsgImMgrCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  h2n_.MergeFrom(from.h2n_);
  n2h_.MergeFrom(from.n2h_);
  nemsgprefix_.MergeFrom(from.nemsgprefix_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.has_log()) {
    mutable_log()->::XmsgImMgrCfgLog::MergeFrom(from.log());
  }
  if (from.has_xsctcpcfg()) {
    mutable_xsctcpcfg()->::XmsgImMgrCfgXscTcpServer::MergeFrom(from.xsctcpcfg());
  }
  if (from.has_misc()) {
    mutable_misc()->::XmsgImMgrCfgMisc::MergeFrom(from.misc());
  }
}

void XmsgImMgrCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgPb::CopyFrom(const XmsgImMgrCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgPb::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgPb::Swap(XmsgImMgrCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgPb::InternalSwap(XmsgImMgrCfgPb* other) {
  using std::swap;
  h2n_.InternalSwap(&other->h2n_);
  n2h_.InternalSwap(&other->n2h_);
  nemsgprefix_.Swap(&other->nemsgprefix_);
  cgt_.Swap(&other->cgt_);
  swap(log_, other->log_);
  swap(xsctcpcfg_, other->xsctcpcfg_);
  swap(misc_, other->misc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgPb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgMongodb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgMongodb::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgMongodb::XmsgImMgrCfgMongodb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMongodb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgMongodb)
}
XmsgImMgrCfgMongodb::XmsgImMgrCfgMongodb(const XmsgImMgrCfgMongodb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgMongodb)
}

void XmsgImMgrCfgMongodb::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImMgrCfgMongodb::~XmsgImMgrCfgMongodb() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgMongodb)
  SharedDtor();
}

void XmsgImMgrCfgMongodb::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgMongodb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgMongodb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgMongodb& XmsgImMgrCfgMongodb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMongodb();
  return *internal_default_instance();
}

XmsgImMgrCfgMongodb* XmsgImMgrCfgMongodb::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgMongodb* n = new XmsgImMgrCfgMongodb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgMongodb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgMongodb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgMongodb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgMongodb.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgMongodb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgMongodb)
  return false;
#undef DO_
}

void XmsgImMgrCfgMongodb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgMongodb.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgMongodb)
}

::google::protobuf::uint8* XmsgImMgrCfgMongodb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgMongodb.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgMongodb)
  return target;
}

size_t XmsgImMgrCfgMongodb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgMongodb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgMongodb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgMongodb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgMongodb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgMongodb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgMongodb)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgMongodb::MergeFrom(const XmsgImMgrCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void XmsgImMgrCfgMongodb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgMongodb::CopyFrom(const XmsgImMgrCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgMongodb::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgMongodb::Swap(XmsgImMgrCfgMongodb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgMongodb::InternalSwap(XmsgImMgrCfgMongodb* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgMongodb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgMysql::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgMysql::kPoolSizeFieldNumber;
const int XmsgImMgrCfgMysql::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgMysql::XmsgImMgrCfgMysql()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMysql();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgMysql)
}
XmsgImMgrCfgMysql::XmsgImMgrCfgMysql(const XmsgImMgrCfgMysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  poolsize_ = from.poolsize_;
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgMysql)
}

void XmsgImMgrCfgMysql::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poolsize_ = 0u;
  _cached_size_ = 0;
}

XmsgImMgrCfgMysql::~XmsgImMgrCfgMysql() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgMysql)
  SharedDtor();
}

void XmsgImMgrCfgMysql::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgMysql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgMysql::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgMysql& XmsgImMgrCfgMysql::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMysql();
  return *internal_default_instance();
}

XmsgImMgrCfgMysql* XmsgImMgrCfgMysql::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgMysql* n = new XmsgImMgrCfgMysql;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgMysql::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poolsize_ = 0u;
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgMysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgMysql)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 poolSize = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgMysql.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgMysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgMysql)
  return false;
#undef DO_
}

void XmsgImMgrCfgMysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 poolSize = 1;
  if (this->poolsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poolsize(), output);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgMysql.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgMysql)
}

::google::protobuf::uint8* XmsgImMgrCfgMysql::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 poolSize = 1;
  if (this->poolsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poolsize(), target);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgMysql.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgMysql)
  return target;
}

size_t XmsgImMgrCfgMysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgMysql)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // uint32 poolSize = 1;
  if (this->poolsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->poolsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgMysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgMysql* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgMysql>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgMysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgMysql)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgMysql::MergeFrom(const XmsgImMgrCfgMysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.poolsize() != 0) {
    set_poolsize(from.poolsize());
  }
}

void XmsgImMgrCfgMysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgMysql::CopyFrom(const XmsgImMgrCfgMysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgMysql::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgMysql::Swap(XmsgImMgrCfgMysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgMysql::InternalSwap(XmsgImMgrCfgMysql* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  swap(poolsize_, other->poolsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgMysql::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgLog::kLevelFieldNumber;
const int XmsgImMgrCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgLog::XmsgImMgrCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgLog)
}
XmsgImMgrCfgLog::XmsgImMgrCfgLog(const XmsgImMgrCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgLog)
}

void XmsgImMgrCfgLog::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImMgrCfgLog::~XmsgImMgrCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgLog)
  SharedDtor();
}

void XmsgImMgrCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgLog::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgLog& XmsgImMgrCfgLog::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgLog();
  return *internal_default_instance();
}

XmsgImMgrCfgLog* XmsgImMgrCfgLog::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgLog* n = new XmsgImMgrCfgLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgLog)
  return false;
#undef DO_
}

void XmsgImMgrCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgLog)
}

::google::protobuf::uint8* XmsgImMgrCfgLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgLog)
  return target;
}

size_t XmsgImMgrCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgLog)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgLog::MergeFrom(const XmsgImMgrCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgImMgrCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgLog::CopyFrom(const XmsgImMgrCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgLog::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgLog::Swap(XmsgImMgrCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgLog::InternalSwap(XmsgImMgrCfgLog* other) {
  using std::swap;
  level_.Swap(&other->level_);
  output_.Swap(&other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgLog::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgXscTcpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgXscTcpServer::kAddrFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kTracingFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgImMgrCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgXscTcpServer::XmsgImMgrCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXscTcpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgXscTcpServer)
}
XmsgImMgrCfgXscTcpServer::XmsgImMgrCfgXscTcpServer(const XmsgImMgrCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgXscTcpServer)
}

void XmsgImMgrCfgXscTcpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _cached_size_ = 0;
}

XmsgImMgrCfgXscTcpServer::~XmsgImMgrCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgXscTcpServer)
  SharedDtor();
}

void XmsgImMgrCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgXscTcpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgXscTcpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgXscTcpServer& XmsgImMgrCfgXscTcpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXscTcpServer();
  return *internal_default_instance();
}

XmsgImMgrCfgXscTcpServer* XmsgImMgrCfgXscTcpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgXscTcpServer* n = new XmsgImMgrCfgXscTcpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgXscTcpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgXscTcpServer)
  return false;
#undef DO_
}

void XmsgImMgrCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgImMgrCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgXscTcpServer)
  return target;
}

size_t XmsgImMgrCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgXscTcpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgXscTcpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgXscTcpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgXscTcpServer::MergeFrom(const XmsgImMgrCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgImMgrCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgXscTcpServer::CopyFrom(const XmsgImMgrCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgXscTcpServer::Swap(XmsgImMgrCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgXscTcpServer::InternalSwap(XmsgImMgrCfgXscTcpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgXscTcpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgXmsgNeH2nAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgXmsgNeH2nAddr::kNegFieldNumber;
const int XmsgImMgrCfgXmsgNeH2nAddr::kAddrFieldNumber;
const int XmsgImMgrCfgXmsgNeH2nAddr::kPwdFieldNumber;
const int XmsgImMgrCfgXmsgNeH2nAddr::kAlgFieldNumber;
const int XmsgImMgrCfgXmsgNeH2nAddr::kRedundantFieldNumber;
const int XmsgImMgrCfgXmsgNeH2nAddr::kCgtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgXmsgNeH2nAddr::XmsgImMgrCfgXmsgNeH2nAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeH2nAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgXmsgNeH2nAddr)
}
XmsgImMgrCfgXmsgNeH2nAddr::XmsgImMgrCfgXmsgNeH2nAddr(const XmsgImMgrCfgXmsgNeH2nAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alg().size() > 0) {
    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  redundant_ = from.redundant_;
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgXmsgNeH2nAddr)
}

void XmsgImMgrCfgXmsgNeH2nAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _cached_size_ = 0;
}

XmsgImMgrCfgXmsgNeH2nAddr::~XmsgImMgrCfgXmsgNeH2nAddr() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgXmsgNeH2nAddr)
  SharedDtor();
}

void XmsgImMgrCfgXmsgNeH2nAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgXmsgNeH2nAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgXmsgNeH2nAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgXmsgNeH2nAddr& XmsgImMgrCfgXmsgNeH2nAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeH2nAddr();
  return *internal_default_instance();
}

XmsgImMgrCfgXmsgNeH2nAddr* XmsgImMgrCfgXmsgNeH2nAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgXmsgNeH2nAddr* n = new XmsgImMgrCfgXmsgNeH2nAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgXmsgNeH2nAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgXmsgNeH2nAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgXmsgNeH2nAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeH2nAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeH2nAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeH2nAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alg().data(), static_cast<int>(this->alg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeH2nAddr.alg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 redundant = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redundant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeH2nAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgXmsgNeH2nAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgXmsgNeH2nAddr)
  return false;
#undef DO_
}

void XmsgImMgrCfgXmsgNeH2nAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alg(), output);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->redundant(), output);
  }

  // string cgt = 6;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cgt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgXmsgNeH2nAddr)
}

::google::protobuf::uint8* XmsgImMgrCfgXmsgNeH2nAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alg(), target);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->redundant(), target);
  }

  // string cgt = 6;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeH2nAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cgt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgXmsgNeH2nAddr)
  return target;
}

size_t XmsgImMgrCfgXmsgNeH2nAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgXmsgNeH2nAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alg());
  }

  // string cgt = 6;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->redundant());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgXmsgNeH2nAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgXmsgNeH2nAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgXmsgNeH2nAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgXmsgNeH2nAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgXmsgNeH2nAddr)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgXmsgNeH2nAddr::MergeFrom(const XmsgImMgrCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.alg().size() > 0) {

    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.redundant() != 0) {
    set_redundant(from.redundant());
  }
}

void XmsgImMgrCfgXmsgNeH2nAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgXmsgNeH2nAddr::CopyFrom(const XmsgImMgrCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgXmsgNeH2nAddr::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgXmsgNeH2nAddr::Swap(XmsgImMgrCfgXmsgNeH2nAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgXmsgNeH2nAddr::InternalSwap(XmsgImMgrCfgXmsgNeH2nAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  addr_.Swap(&other->addr_);
  pwd_.Swap(&other->pwd_);
  alg_.Swap(&other->alg_);
  cgt_.Swap(&other->cgt_);
  swap(redundant_, other->redundant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgXmsgNeH2nAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgXmsgNeN2hAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgXmsgNeN2hAddr::kNegFieldNumber;
const int XmsgImMgrCfgXmsgNeN2hAddr::kCgtFieldNumber;
const int XmsgImMgrCfgXmsgNeN2hAddr::kPwdFieldNumber;
const int XmsgImMgrCfgXmsgNeN2hAddr::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgXmsgNeN2hAddr::XmsgImMgrCfgXmsgNeN2hAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeN2hAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgXmsgNeN2hAddr)
}
XmsgImMgrCfgXmsgNeN2hAddr::XmsgImMgrCfgXmsgNeN2hAddr(const XmsgImMgrCfgXmsgNeN2hAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgXmsgNeN2hAddr)
}

void XmsgImMgrCfgXmsgNeN2hAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImMgrCfgXmsgNeN2hAddr::~XmsgImMgrCfgXmsgNeN2hAddr() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgXmsgNeN2hAddr)
  SharedDtor();
}

void XmsgImMgrCfgXmsgNeN2hAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgXmsgNeN2hAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgXmsgNeN2hAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgXmsgNeN2hAddr& XmsgImMgrCfgXmsgNeN2hAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgXmsgNeN2hAddr();
  return *internal_default_instance();
}

XmsgImMgrCfgXmsgNeN2hAddr* XmsgImMgrCfgXmsgNeN2hAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgXmsgNeN2hAddr* n = new XmsgImMgrCfgXmsgNeN2hAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgXmsgNeN2hAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgXmsgNeN2hAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgXmsgNeN2hAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeN2hAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeN2hAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeN2hAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgXmsgNeN2hAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgXmsgNeN2hAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgXmsgNeN2hAddr)
  return false;
#undef DO_
}

void XmsgImMgrCfgXmsgNeN2hAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgXmsgNeN2hAddr)
}

::google::protobuf::uint8* XmsgImMgrCfgXmsgNeN2hAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgXmsgNeN2hAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgXmsgNeN2hAddr)
  return target;
}

size_t XmsgImMgrCfgXmsgNeN2hAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgXmsgNeN2hAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgXmsgNeN2hAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgXmsgNeN2hAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgXmsgNeN2hAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgXmsgNeN2hAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgXmsgNeN2hAddr)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgXmsgNeN2hAddr::MergeFrom(const XmsgImMgrCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImMgrCfgXmsgNeN2hAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgXmsgNeN2hAddr::CopyFrom(const XmsgImMgrCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgXmsgNeN2hAddr::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgXmsgNeN2hAddr::Swap(XmsgImMgrCfgXmsgNeN2hAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgXmsgNeN2hAddr::InternalSwap(XmsgImMgrCfgXmsgNeN2hAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  pwd_.Swap(&other->pwd_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgXmsgNeN2hAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgInfluxDb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgInfluxDb::kHostFieldNumber;
const int XmsgImMgrCfgInfluxDb::kUsrFieldNumber;
const int XmsgImMgrCfgInfluxDb::kPwdFieldNumber;
const int XmsgImMgrCfgInfluxDb::kDbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgInfluxDb::XmsgImMgrCfgInfluxDb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgInfluxDb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgInfluxDb)
}
XmsgImMgrCfgInfluxDb::XmsgImMgrCfgInfluxDb(const XmsgImMgrCfgInfluxDb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgInfluxDb)
}

void XmsgImMgrCfgInfluxDb::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImMgrCfgInfluxDb::~XmsgImMgrCfgInfluxDb() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgInfluxDb)
  SharedDtor();
}

void XmsgImMgrCfgInfluxDb::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgInfluxDb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgInfluxDb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgInfluxDb& XmsgImMgrCfgInfluxDb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgInfluxDb();
  return *internal_default_instance();
}

XmsgImMgrCfgInfluxDb* XmsgImMgrCfgInfluxDb::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgInfluxDb* n = new XmsgImMgrCfgInfluxDb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgInfluxDb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgInfluxDb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgInfluxDb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgInfluxDb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgInfluxDb.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgInfluxDb.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgInfluxDb.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgInfluxDb.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgInfluxDb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgInfluxDb)
  return false;
#undef DO_
}

void XmsgImMgrCfgInfluxDb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgInfluxDb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string usr = 2;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string db = 4;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->db(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgInfluxDb)
}

::google::protobuf::uint8* XmsgImMgrCfgInfluxDb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgInfluxDb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string usr = 2;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->usr(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string db = 4;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgInfluxDb.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->db(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgInfluxDb)
  return target;
}

size_t XmsgImMgrCfgInfluxDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgInfluxDb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string usr = 2;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string db = 4;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgInfluxDb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgInfluxDb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgInfluxDb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgInfluxDb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgInfluxDb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgInfluxDb)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgInfluxDb::MergeFrom(const XmsgImMgrCfgInfluxDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgInfluxDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
}

void XmsgImMgrCfgInfluxDb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgInfluxDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgInfluxDb::CopyFrom(const XmsgImMgrCfgInfluxDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgInfluxDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgInfluxDb::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgInfluxDb::Swap(XmsgImMgrCfgInfluxDb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgInfluxDb::InternalSwap(XmsgImMgrCfgInfluxDb* other) {
  using std::swap;
  host_.Swap(&other->host_);
  usr_.Swap(&other->usr_);
  pwd_.Swap(&other->pwd_);
  db_.Swap(&other->db_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgInfluxDb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImMgrCfgMisc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImMgrCfgMisc::kAdminCgtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImMgrCfgMisc::XmsgImMgrCfgMisc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMisc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImMgrCfgMisc)
}
XmsgImMgrCfgMisc::XmsgImMgrCfgMisc(const XmsgImMgrCfgMisc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  admincgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.admincgt().size() > 0) {
    admincgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.admincgt_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImMgrCfgMisc)
}

void XmsgImMgrCfgMisc::SharedCtor() {
  admincgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImMgrCfgMisc::~XmsgImMgrCfgMisc() {
  // @@protoc_insertion_point(destructor:XmsgImMgrCfgMisc)
  SharedDtor();
}

void XmsgImMgrCfgMisc::SharedDtor() {
  admincgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImMgrCfgMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImMgrCfgMisc::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImMgrCfgMisc& XmsgImMgrCfgMisc::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::InitDefaultsXmsgImMgrCfgMisc();
  return *internal_default_instance();
}

XmsgImMgrCfgMisc* XmsgImMgrCfgMisc::New(::google::protobuf::Arena* arena) const {
  XmsgImMgrCfgMisc* n = new XmsgImMgrCfgMisc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImMgrCfgMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImMgrCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  admincgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImMgrCfgMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImMgrCfgMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string adminCgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admincgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->admincgt().data(), static_cast<int>(this->admincgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImMgrCfgMisc.adminCgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImMgrCfgMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImMgrCfgMisc)
  return false;
#undef DO_
}

void XmsgImMgrCfgMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImMgrCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string adminCgt = 2;
  if (this->admincgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->admincgt().data(), static_cast<int>(this->admincgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgMisc.adminCgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->admincgt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImMgrCfgMisc)
}

::google::protobuf::uint8* XmsgImMgrCfgMisc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImMgrCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string adminCgt = 2;
  if (this->admincgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->admincgt().data(), static_cast<int>(this->admincgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImMgrCfgMisc.adminCgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->admincgt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImMgrCfgMisc)
  return target;
}

size_t XmsgImMgrCfgMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImMgrCfgMisc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string adminCgt = 2;
  if (this->admincgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->admincgt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImMgrCfgMisc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImMgrCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImMgrCfgMisc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImMgrCfgMisc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImMgrCfgMisc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImMgrCfgMisc)
    MergeFrom(*source);
  }
}

void XmsgImMgrCfgMisc::MergeFrom(const XmsgImMgrCfgMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImMgrCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admincgt().size() > 0) {

    admincgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.admincgt_);
  }
}

void XmsgImMgrCfgMisc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImMgrCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImMgrCfgMisc::CopyFrom(const XmsgImMgrCfgMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImMgrCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImMgrCfgMisc::IsInitialized() const {
  return true;
}

void XmsgImMgrCfgMisc::Swap(XmsgImMgrCfgMisc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImMgrCfgMisc::InternalSwap(XmsgImMgrCfgMisc* other) {
  using std::swap;
  admincgt_.Swap(&other->admincgt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImMgrCfgMisc::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dmgr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
